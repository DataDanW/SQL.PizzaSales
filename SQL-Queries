##  ðŸš¨ SQL code written in BigQuery

--Annual revenue?
SELECT ROUND(SUM(Total_Price),0) AS Total_Revenue
FROM (
  SELECT a.order_details_id, a.pizza_id, a.quantity, b.price,
    (a.quantity * b.price) AS Total_Price
  FROM pizzasales.pizza_salesDB.order_details AS a
  JOIN pizzasales.pizza_salesDB.pizzas AS b
  ON a.pizza_id = b.pizza_id
  ORDER BY a.order_id, a.order_details_id);
  -- $817,860
  

  --How many orders were placed in 2015?
SELECT COUNT(order_id) AS Total_Orders
FROM pizza_salesDB.orders;
#21350


--How many pizzas were made/sold in 2015
SELECT SUM(quantity) AS Total_Quantity
FROM pizza_salesDB.order_details;
--49574


--How many different pizza types are sold? 
SELECT COUNT(DISTINCT pizza_type_id) AS No_Of_Pizzas
FROM pizza_salesDB.pizzas
#32


--Most expensive and least expensive pizza?
SELECT * 
FROM pizzasales.pizza_salesDB.pizzas
ORDER BY price
LIMIT 1;
-- Small pepperoni at $9.75

SELECT * 
FROM pizzasales.pizza_salesDB.pizzas
ORDER BY price DESC
LIMIT 1;
-- XXL Greek at $35.95


--Average Pizza Price
SELECT ROUND(AVG(price),2) AS Avg_Pizza_Price
FROM pizzasales.pizza_salesDB.pizzas;
--$16.44


-- Average Order Value
SELECT ROUND(AVG(Total_Price),2) AS Avg_Order_Value
FROM (
  SELECT a.order_id,
    SUM(a.quantity * b.price) AS Total_Price
  FROM pizzasales.pizza_salesDB.order_details AS a
  JOIN pizzasales.pizza_salesDB.pizzas AS b
  ON a.pizza_id = b.pizza_id
  GROUP BY a.order_id);
  -- $38.31

-- What is the average number of pizzas sold per order?
SELECT ROUND(AVG(Pizzas_Per_Order),1) AS Avg_PizzasPer_Order
FROM  (
  SELECT SUM(a.quantity) AS Pizzas_Per_Order
  FROM pizzasales.pizza_salesDB.order_details AS a
  GROUP BY a.order_id);
--  2.3 pizzas made per order 


-- Most pizzas sold from one order?
SELECT a.order_id, SUM(a.quantity) AS Pizzas_Per_Order
FROM pizzasales.pizza_salesDB.order_details AS a
GROUP BY a.order_id
ORDER BY Pizzas_Per_Order DESC;
--  Order 18845 with 28 pizzas, order 10760 with 25 pizzas

-- Distribution of pizza orders placed
SELECT COUNT(Pizzas_Per_Order) AS Total, Pizzas_Per_Order
FROM (
SELECT a.order_id, SUM(a.quantity) AS Pizzas_Per_Order
FROM pizzasales.pizza_salesDB.order_details AS a
GROUP BY a.order_id)
GROUP BY Pizzas_Per_Order
ORDER BY Pizzas_Per_Order;
-- 8K orders of 1x pizza, 6k orders of 2x pizzas, 3207 orders of 3x pizzas

-- How many number of orders where 10+ pizzas where ordered? 
SELECT SUM(x)
FROM (
    SELECT COUNT(Pizzas_Per_Order) AS Total, Pizzas_Per_Order AS x
    FROM (
        SELECT a.order_id, SUM(a.quantity) AS Pizzas_Per_Order
        FROM pizzasales.pizza_salesDB.order_details AS a
        GROUP BY a.order_id)
    WHERE Pizzas_Per_Order >=10
    GROUP BY Pizzas_Per_Order
    ORDER BY Pizzas_Per_Order);
-- 128 orders where 10+ pizzas were ordered 
-- Reccomendation to reach out to these groups to identify business/event bookings for repeat custom


--Revenue by month
SELECT Month, ROUND (SUM (Total_Price),0) AS MonthRev
FROM (
    SELECT order_id, EXTRACT(MONTH FROM date) AS Month, 
  (quantity * price) AS Total_Price
    FROM (
      SELECT c.order_id, a.order_details_id,  
        a.quantity, b.price, c.date, 
      FROM pizza_salesDB.orders AS c
      JOIN pizzasales.pizza_salesDB.order_details AS a
        ON c.order_id = a.order_id
      JOIN pizza_salesDB.pizzas AS b
        ON b.pizza_id = a.pizza_id
      ORDER BY c.order_id, a.order_details_id) AS e)
  GROUP BY Month;
--Worst month = October 64k, September 64.1k (Run promotions in this month)
--Best month = July 72k 


--Average monthly revenue
SELECT AVG(MonthRev) Avg_MonthRev
  FROM (
      SELECT Month, ROUND (SUM (Total_Price),0) AS MonthRev
      FROM (
          SELECT order_id, EXTRACT(MONTH FROM date) AS Month, 
        (quantity * price) AS Total_Price
          FROM (
            SELECT c.order_id, a.order_details_id,  
              a.quantity, b.price, c.date, 
            FROM pizza_salesDB.orders AS c
            JOIN pizzasales.pizza_salesDB.order_details AS a
              ON c.order_id = a.order_id
            JOIN pizza_salesDB.pizzas AS b
              ON b.pizza_id = a.pizza_id
            ORDER BY c.order_id, a.order_details_id) AS e)
    GROUP BY Month);
  --68,155k 

-- Average number of pizzas made each hour
SELECT EXTRACT(DAYOFWEEK FROM date) AS Days,
    EXTRACT(HOUR FROM time) AS Hour,
    ROUND((SUM((order_details_id/order_details_id)*quantity)/15),1) AS AVG_No_Pizzas,
  FROM (
  SELECT c.order_id, a.order_details_id,  
            a.quantity, c.time, c.date,
          FROM pizza_salesDB.orders AS c
          JOIN pizzasales.pizza_salesDB.order_details AS a
            ON c.order_id = a.order_id
          JOIN pizza_salesDB.pizzas AS b
            ON b.pizza_id = a.pizza_id
          ORDER BY c.order_id, a.order_details_id) as e
GROUP BY Days, Hour
Order by Days, Hour;
--


-- Busiest and least busiest times
SELECT EXTRACT(DAYOFWEEK FROM date) AS Days,
    EXTRACT(HOUR FROM time) AS Hour,
    ROUND((SUM((order_details_id/order_details_id)*quantity)/15),1) AS AVG_No_Pizzas,
  FROM (
  SELECT c.order_id, a.order_details_id,  
            a.quantity, c.time, c.date,
          FROM pizza_salesDB.orders AS c
          JOIN pizzasales.pizza_salesDB.order_details AS a
            ON c.order_id = a.order_id
          JOIN pizza_salesDB.pizzas AS b
            ON b.pizza_id = a.pizza_id
          ORDER BY c.order_id, a.order_details_id) as e
GROUP BY Days, Hour
Order by AVG_No_Pizzas DESC LIMIT 10;
-- Busiest Thursday 12-13, 13-14, Mon,Tue,Wed Fri 12-13 

SELECT EXTRACT(DAYOFWEEK FROM date) AS Days,
    EXTRACT(HOUR FROM time) AS Hour,
    ROUND((SUM((order_details_id/order_details_id)*quantity)/15),1) AS AVG_No_Pizzas,
  FROM (
  SELECT c.order_id, a.order_details_id,  
            a.quantity, c.time, c.date,
          FROM pizza_salesDB.orders AS c
          JOIN pizzasales.pizza_salesDB.order_details AS a
            ON c.order_id = a.order_id
          JOIN pizza_salesDB.pizzas AS b
            ON b.pizza_id = a.pizza_id
          ORDER BY c.order_id, a.order_details_id) as e
GROUP BY Days, Hour
Order by AVG_No_Pizzas LIMIT 10;
-- Least busiest: 9-11 and 23-00
-- Sunday, Monday, Saturday at 10am 


--Most sold pizzas types
--Least sold pizza types
SELECT pizza_type_id, size, SUM(quantity) AS total_orders
FROM (
    SELECT a.pizza_type_id, a.pizza_id, a.size, b.order_details_id, b.quantity
    FROM pizza_salesDB.pizzas AS a
    JOIN pizza_salesDB.order_details AS b
    ON a.pizza_id = b.pizza_id ) AS c
GROUP BY pizza_type_id, size
ORDER BY total_orders;
-- 1. Big Meat Small
-- 2. Thai Chicken Large
-- 3. Five Cheese Large
-- 4. Four Cheese Large
-- 91. Greek XXL
-- 90. Green Garden L
-- 89. Chicken Alfredo

-- Deep Dive, Greek, Green Garden, Chicken Alfredo
SELECT pizza_type_id, size, SUM(quantity) AS total_orders
FROM (
    SELECT a.pizza_type_id, a.pizza_id, a.size, b.order_details_id, b.quantity
    FROM pizza_salesDB.pizzas AS a
    JOIN pizza_salesDB.order_details AS b
    ON a.pizza_id = b.pizza_id ) AS c
WHERE pizza_type_id LIKE '%green_garden%'
  OR pizza_type_id LIKE '%ckn_alfredo%'
  OR pizza_type_id LIKE '%greek%'
GROUP BY pizza_type_id, size
ORDER BY pizza_type_id, size DESC;
-- Where the smaller pizzas sell more, consider increasing the price or decreasing the price of the larger pizza


-- Best and worse performing pizzas (Sum of all sizes)
SELECT pizza_type_id, SUM(quantity) AS total_orders
FROM (
    SELECT a.pizza_type_id, a.pizza_id, a.size, b.order_details_id, b.quantity
    FROM pizza_salesDB.pizzas AS a
    JOIN pizza_salesDB.order_details AS b
    ON a.pizza_id = b.pizza_id ) AS c
GROUP BY pizza_type_id
ORDER BY total_orders;
-- Best: Classic Deluxe, bbq chicken, hawaiian, pepperoni
-- Worst: Brie carre, Mediteraneo, Calabrese
-- Reccomendation to remove Brie Carre off the menu


--Most sold pizzas types
--Least sold pizza types
SELECT pizza_type_id, size, SUM(quantity) AS total_orders
FROM (
    SELECT a.pizza_type_id, a.pizza_id, a.size, b.order_details_id, b.quantity
    FROM pizza_salesDB.pizzas AS a
    JOIN pizza_salesDB.order_details AS b
    ON a.pizza_id = b.pizza_id ) AS c
GROUP BY pizza_type_id, size
ORDER BY total_orders;
-- 1. Big Meat Small
-- 2. Thai Chicken Large
-- 3. Five Cheese Large
-- 4. Four Cheese Large
-- 91. Greek XXL
-- 90. Green Garden L
-- 89. Chicken Alfredo

-- Deep Dive, Greek, Green Garden, Chicken Alfredo
SELECT pizza_type_id, size, SUM(quantity) AS total_orders
FROM (
    SELECT a.pizza_type_id, a.pizza_id, a.size, b.order_details_id, b.quantity
    FROM pizza_salesDB.pizzas AS a
    JOIN pizza_salesDB.order_details AS b
    ON a.pizza_id = b.pizza_id ) AS c
WHERE pizza_type_id LIKE '%green_garden%'
  OR pizza_type_id LIKE '%ckn_alfredo%'
  OR pizza_type_id LIKE '%greek%'
GROUP BY pizza_type_id, size
ORDER BY pizza_type_id, size DESC;
-- Where the smaller pizzas sell more, consider increasing the price or decreasing the price of the larger pizza


-- Best and worse performing pizzas (Sum of all sizes)
SELECT pizza_type_id, SUM(quantity) AS total_orders
FROM (
    SELECT a.pizza_type_id, a.pizza_id, a.size, b.order_details_id, b.quantity
    FROM pizza_salesDB.pizzas AS a
    JOIN pizza_salesDB.order_details AS b
    ON a.pizza_id = b.pizza_id ) AS c
GROUP BY pizza_type_id
ORDER BY total_orders;
-- Best: Classic Deluxe, bbq chicken, hawaiian, pepperoni
-- Worst: Brie carre, Mediteraneo, Calabrese
-- Reccomendation to remove Brie Carre off the menu
